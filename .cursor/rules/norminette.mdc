---
description: 
globs: 
alwaysApply: true
---
# La Norme - Version 4

## Résumé
Ce document décrit **La Norme C** en vigueur à 42. Une norme de programmation définit un ensemble de règles régissant l’écriture d’un code. **La Norme** s’applique par défaut à tous les projets C du Cercle Intérieur et à tout projet où elle est spécifiée.

---

## II. Pourquoi ?

La norme a été conçue pour répondre à des besoins pédagogiques spécifiques :

- **Sequencing** : 
  - Le codage implique la division d’une tâche complexe en instructions élémentaires exécutées en séquence.
  - Une architecture simple et claire est nécessaire pour les débutants, avec une compréhension totale des instructions et de leur ordre d’exécution.
  - Les syntaxes cryptiques ou les fonctions mélangeant plusieurs tâches sont sources de confusion et d’erreurs.
  - La norme exige des morceaux de code simples, avec une tâche unique par fonction clairement compréhensible et vérifiable.
  - Raisons pour lesquelles les fonctions sont limitées à **25 lignes** et certaines constructions (comme `for`, `do...while`, ternaires) sont interdites.

- **L’aspect et la sensation** :
  - Uniformiser la présentation du code pour faciliter les échanges entre pairs (apprentissage et évaluation).
  - Permet de comprendre rapidement le code d’un autre sans décryptage préalable.
  - Instructions précises sur la dénomination, l’indentation, les accolades, les tabulations et les espaces.
  - Le code conforme à la norme devient une marque reconnaissable de la communauté 42.

- **Vision à long terme** :
  - Écrire un code compréhensible facilite sa maintenance (corrections de bogues, ajouts de fonctionnalités).
  - Évite l’abandon de code par manque de clarté.
  - Apprendre tôt ces pratiques améliore la qualité des projets futurs.

- **Réflexion** :
  - Les règles ne sont pas arbitraires ; elles sont basées sur des bonnes pratiques réfléchies.
  - Encouragement à rechercher les justifications (ex. pourquoi des fonctions courtes, des noms explicites, des lignes de 80 colonnes max, etc.).

---

## III. La Norme

### III.1 Conventions de dénomination
- **Structures** : doivent commencer par `s_`.
- **Typedef** : doivent commencer par `t_`.
- **Unions** : doivent commencer par `u_`.
- **Enums** : doivent commencer par `e_`.
- **Globales** : doivent commencer par `g_`.
- **Variables et fonctions** : 
  - Composées exclusivement de **minuscules**, **chiffres** et **underscores (`_`)**.
  - Doivent suivre le style **Snake Case** (ex. `my_variable`).
- **Fichiers et répertoires** : 
  - Composés exclusivement de **minuscules**, **chiffres** et **underscores (`_`)**.
  - Doivent suivre le style **Snake Case**.
- **Caractères** : seuls les caractères de la table **ASCII standard** sont autorisés.
- **Langue** : tous les identifiants (fonctions, macros, types, variables, etc.) doivent être en **anglais**.
- **Noms explicites** : les noms des objets (variables, fonctions, macros, types, fichiers, répertoires) doivent être les plus **explicites** ou **mnémotechniques** possibles.
- **Variables globales** : 
  - Interdites, sauf pour la gestion des signaux (`signal handling`) ou si explicitement autorisées dans le projet.
  - Toute utilisation non autorisée est une erreur de Norme.
- **Compilabilité** : le fichier doit être **compilable** ; un fichier qui ne compile pas ne passe pas la Norme.

---

### III.2 Formatage
- **Indentation** : 
  - Utiliser des **tabulations** équivalant à 4 espaces (pas des espaces).
- **Taille des fonctions** : 
  - Maximum **25 lignes**, sans compter les accolades du bloc de la fonction.
- **Longueur des lignes** : 
  - Maximum **80 colonnes**, commentaires inclus.
  - Une tabulation compte pour le nombre d’espaces qu’elle représente (ex. 4 colonnes).
- **Séparation des fonctions** : 
  - Chaque fonction doit être séparée de la suivante par **une ligne vide**.
  - Commentaires ou préprocesseurs peuvent être juste au-dessus de la fonction ; le saut de ligne suit la fonction précédente.
- **Instructions par ligne** : 
  - Une seule instruction par ligne.
- **Lignes vides** : 
  - Doivent être totalement vides (pas d’espaces ni de tabulations).
- **Espaces en fin de ligne** : 
  - Interdits.
- **Espaces consécutifs** : 
  - Interdiction d’avoir **deux espaces à la suite**.
- **Retours à la ligne** : 
  - Obligatoires après une accolade (ouvrante ou fermante) ou une fin de structure de contrôle.
- **Virgules et points-virgules** : 
  - Doivent être suivis d’**un espace**, sauf en fin de ligne.
- **Opérateurs et opérandes** : 
  - Doivent être séparés par **un seul espace**.
- **Mots-clés C** : 
  - Doivent être suivis d’**un espace**, sauf pour les types (`int`, `char`, `float`, etc.) et `sizeof`.
- **Déclarations de variables** : 
  - Doivent être alignées sur la **même colonne**.
- **Pointeurs** : 
  - L’étoile (`*`) doit être **collée au nom de la variable** (ex. `int *ptr`).
- **Déclarations** : 
  - Une seule déclaration de variable par ligne.
- **Initialisation** : 
  - Interdite sur la même ligne que la déclaration, sauf pour les **variables globales** (quand permises) et **statiques**.
- **Position des déclarations** : 
  - En **début de fonction**, séparées de l’implémentation par **une ligne vide**.
- **Lignes vides dans les déclarations** : 
  - Interdites au milieu des déclarations ou de l’implémentation.
- **Assignation multiple** : 
  - Interdite (ex. `a = b = 0;`).
- **Retour à la ligne dans les instructions** : 
  - Autorisé, mais :
    - Ajouter une **indentation supplémentaire** par accolade ou opérateur d’affectation.
    - Les **opérateurs** doivent être en **début de ligne**.

---

### III.3 Fonctions
- **Paramètres** : 
  - Maximum **4 paramètres nommés** par fonction.
- **Prototypage** : 
  - Une fonction sans argument doit être prototypée avec `void` (ex. `void my_function(void);`).
- **Noms des paramètres** : 
  - Obligatoires dans les prototypes.
- **Séparation** : 
  - Chaque définition de fonction doit être séparée de la suivante par **une ligne vide**.
- **Variables par bloc** : 
  - Maximum **5 variables** par bloc.
- **Retour** : 
  - Doit être entre **parenthèses** (ex. `return (0);`).
- **Indentation** : 
  - Une seule **tabulation** entre le type de retour et le nom de la fonction.

---

### III.4 Typedef, struct, enum et union
- **Indentation** : 
  - Utiliser **une tabulation** pour déclarer une `struct`, `enum` ou `union`.
- **Déclaration de variables** : 
  - Un seul espace dans le type lors de la déclaration (ex. `struct s_mystruct var;`).
- **Typedef** : 
  - Le nom du typedef doit être **aligné** avec le nom de la `struct`, `union` ou `enum`.
  - Toutes les règles de dénomination s’appliquent.
- **Alignement** : 
  - Tous les noms des membres de structures doivent être alignés sur la **même colonne**.
- **Déclaration dans .c** : 
  - Interdite pour les structures.

---

### III.5 Headers
- **Contenu autorisé** : 
  - Inclusions de headers (système ou non), déclarations, `#define`, prototypes et macros.
- **Position des includes** : 
  - Au **début du fichier**.
- **Inclusion de .c** : 
  - Interdite.
- **Protection contre double inclusion** : 
  - Obligatoire.
  - Exemple : pour `ft_foo.h`, utiliser la macro `FT_FOO_H`.
- **Inclusions inutiles** : 
  - Interdites ; chaque inclusion doit être **justifiée** dans les fichiers `.c` et `.h`.

---

### III.6 L’en-tête 42
- **Obligatoire** : 
  - Tout fichier `.c` et `.h` doit commencer par l’**en-tête standard 42**.
- **Contenu** : 
  - Commentaire multiligne avec :
    - **Créateur** (login et email).
    - **Date de création**.
    - **Login** et **date de dernière mise à jour**.
- **Mise à jour** : 
  - Les informations doivent être **automatiquement mises à jour** à chaque sauvegarde.
- **Disponibilité** : 
  - L’en-tête est disponible sur les clusters (ex. Emacs : `C-c C-h`, Vim : `:Stdheader` ou `F1`).

---

### III.7 Macros et Préprocesseur
- **Utilisation des #define** : 
  - Réservés aux **valeurs littérales et constantes**, rien d’autre.
- **Macros pour contourner la norme** : 
  - Interdites (doit être vérifiable par un humain).
- **Macros standards** : 
  - Autorisées si la bibliothèque est permise dans le projet.
- **Macros multilignes** : 
  - Interdites.
- **Noms des macros** : 
  - Doivent être en **majuscules**.
- **Indentation** : 
  - Indenter les caractères suivant `#if`, `#ifdef` ou `#ifndef`.

---

### III.8 Choses Interdites !
- Interdiction d’utiliser :
  - `for`
  - `do...while`
  - `switch`
  - `case`
  - `goto`
  - **Opérateurs ternaires** (`?:`)
  - **Tableaux à taille variable** (VLA - Variable Length Array)
  - **Types implicites** dans les déclarations de variables (ex. `x = 42;` sans type).

---

### III.9 Commentaires
- **Position** : 
  - Interdits dans le **corps des fonctions**.
  - Doivent être à la **fin d’une ligne** ou sur une **ligne séparée**.
- **Langue et utilité** : 
  - Doivent être en **anglais** et **utiles**.
- **Justification** : 
  - Ne peuvent pas justifier une fonction non conforme.

---

### III.10 Les fichiers
- **Inclusion de .c** : 
  - Interdite.
- **Définitions de fonctions** : 
  - Maximum **5 définitions de fonctions** par fichier `.c`.

---

### III.11 Makefile
- **Vérification** : 
  - Non vérifié par la Norminette ; doit être vérifié par un humain lors de l’évaluation.
- **Règles obligatoires** : 
  - `$(NAME)`, `clean`, `fclean`, `re`, `all`.
- **Relink** : 
  - Le projet est considéré comme **non fonctionnel** si le Makefile relinke.
- **Projets multibinaires** : 
  - Règle `all` pour compiler tous les binaires.
  - Une règle spécifique par binaire.
- **Bibliothèques** : 
  - Le Makefile doit compiler automatiquement les bibliothèques nécessaires (ex. `libft`).
- **Sources** : 
  - Les sources nécessaires à la compilation doivent être **explicitement citées** dans le Makefile.